openapi: 3.0.0
info:
  title: Re:Books API
  description: API for managing selling books from user's personal libraries.
  version: 1.0.0
servers:
  - url: 'http://localhost:8000/api/v1'
    description: Development server

paths:
  /register:
    post:
      tags:
        - Authentication
      summary: Register User
      operationId: RegisterUser
      requestBody:
        description: User registration data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: bob
                  description: User's first name
                lastName:
                  type: string
                  example: white
                  description: User's last name
                email:
                  type: string
                  format: email
                  example: bob@gmail.com
                  description: User's email address
                password:
                  type: string
                  format: password
                  example: secret
                  description: User's password
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Registration successful
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email is required
      security: []
  /login:
    post:
      tags:
        - Authentication
      summary: User Login
      operationId: LoginUser
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                  description: User's email address
                password:
                  type: string
                  format: password
                  example: secretpassword
                  description: User's password
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    description: User's information (excluding sensitive data)
                  token:
                    type: string
                    example: "jwt-token"
                    description: JWT token for authorization
        '400':
          description: Bad Request - Missing email or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Please provide email and password
        '401':
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid Credentials
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An unexpected error occurred
      security: []
  /logout:
    post:
      tags:
        - Authentication
      summary: Logout User
      operationId: LogoutUser
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout successful
                    description: Confirmation message indicating successful logout
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Logout failed
                    description: Error message indicating logout failure
      security: []
  /update:
    patch:
      tags:
        - Authentication
      summary: Update User Information
      operationId: UpdateUser
      requestBody:
        required: true
        description: A JSON object specifying the user fields to update
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: John
                  description: User's first name
                lastName:
                  type: string
                  example: Doe
                  description: User's last name
                location:
                  type: string
                  example: New York
                  description: User's location
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      firstName:
                        type: string
                        example: John
                      lastName:
                        type: string
                        example: Doe
                      email:
                        type: string
                        example: john.doe@example.com
                      location:
                        type: string
                        example: New York
        '400':
          description: Bad request (e.g., no valid fields to update or empty location)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No valid fields to update
        '401':
          description: Unauthorized (e.g., missing or invalid token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Error updating user
      security:
        - BearerAuth: []
  /forgot-password:
    post:
      tags:
        - Password Recovery
      summary: Request a password reset link
      operationId: RequestPasswordReset
      description: |
        Initiates the process of resetting the user's password by sending a password reset link to the provided email. The link will contain a JWT token which is valid for 1 hour.
        The token is used to verify the userâ€™s identity and allows the user to securely reset their password.
      requestBody:
        description: Email address to request password reset
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: The email address of the user who wants to reset their password.
              required:
                - email
      responses:
        '200':
          description: Password reset link sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Reset link sent to email
        '400':
          description: Bad request due to missing or invalid email
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Please provide an email.
        '404':
          description: Email not found in the system
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid Credentials.
      security: []
  /password-reset:
    post:
      tags:
        - Password Recovery
      summary: Reset the password using a reset token
      operationId: ResetPassword
      description: |
        This endpoint allows a user to reset their password using a valid JWT reset token received via email. The token verifies the user's identity and ensures that the reset process is secure.
        If the token is expired or invalid, the request will be rejected.
      requestBody:
        description: Token and new password to reset the user's password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The token received in the password reset email.
                newPassword:
                  type: string
                  description: The new password the user wants to set.
              required:
                - token
                - newPassword
      responses:
        '200':
          description: Password successfully reset
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Password has been successfully reset
        '400':
          description: Bad request due to missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token and new password are required
        '401':
          description: Unauthorized due to invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid or expired token
      security: []
  /books:
    get:
      summary: Get all books
      description: Fetches a list of books with optional filters.
      tags:
        - Books
      parameters:
        - name: query
          in: query
          description: General search query
          required: false
          schema:
            type: string
        - name: title
          in: query
          description: Filter by book title
          required: false
          schema:
            type: string
        - name: author
          in: query
          description: Filter by author
          required: false
          schema:
            type: string
        - name: isbn
          in: query
          description: Filter by ISBN
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Limit the number of books returned
          required: false
          schema:
            type: integer
            default: 12
        - name: skip
          in: query
          description: Skip the first N books (pagination)
          required: false
          schema:
            type: integer
            default: 0
        - name: ageCategory
          in: query
          description: Filter by age category
          required: false
          schema:
            type: string
        - name: condition
          in: query
          description: Filter by condition
          required: false
          schema:
            type: string
        - name: genre
          in: query
          description: Filter by genre
          required: false
          schema:
            type: string
        - name: coverType
          in: query
          description: Filter by cover type
          required: false
          schema:
            type: string
        - name: sort
          in: query
          description: Sorting parameter
          required: false
          schema:
            type: string
            default: '-createdAt'
        - name: userId
          in: query
          description: Filter by user ID (owner of the books)
          required: false
          schema:
            type: string
        - name: isAvailable
          in: query
          description: Filter by availability (true/false)
          required: false
          schema:
            type: string
            enum:
              - 'true'
              - 'false'
      responses:
        '200':
          description: Successfully retrieved books
          content:
            application/json:
              schema:
                type: object
                properties:
                  books:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
                  count:
                    type: integer
                    example: 12
        '400':
          description: Invalid query parameters
        '500':
          description: Internal server error
      security: []
  /books/{id}:
    get:
      summary: Get a single book
      description: Fetches a book by its ID.
      tags:
        - Books
      parameters:
        - name: id
          in: path
          description: The ID of the book
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
        '500':
          description: Internal server error
      security: []
    patch:
      summary: Update a book
      description: Updates the details of an existing book.
      tags:
        - Books
      parameters:
        - name: id
          in: path
          description: The ID of the book to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Book data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Successfully updated the book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid data provided
        '404':
          description: Book not found
        '500':
          description: Internal server error

    delete:
      summary: Delete a book
      description: Deletes a book by its ID.
      tags:
        - Books
      parameters:
        - name: id
          in: path
          description: The ID of the book to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted the book
        '404':
          description: Book not found
        '500':
          description: Internal server error

  /books/:
    post:
      summary: Create a new book
      description: Adds a new book to the collection.
      tags:
        - Books
      requestBody:
        description: Book data to create a new book
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid data provided
        '500':
          description: Internal Server Error

components:
  schemas:
    Book:
      type: object
      properties:
        title:
          type: string
          description: The title of the book
          minLength: 2
          maxLength: 100
        author:
          type: string
          description: The author of the book
          minLength: 2
          maxLength: 100
        publisher:
          type: string
          description: The publisher of the book
          minLength: 2
          maxLength: 100
        publishedYear:
          type: integer
          description: The year the book was published
          minimum: 1440
          maximum: { "$ref": "#/components/examples/CurrentYear" }
        pages:
          type: integer
          description: The number of pages in the book
          minimum: 2
        isbn10:
          type: string
          description: ISBN-10 identifier
        isbn13:
          type: string
          description: ISBN-13 identifier
        description:
          type: string
          description: A brief description of the book
        genre:
          type: string
          description: The genre of the book
        ageCategory:
          type: string
          description: The age category for the book
        condition:
          type: string
          description: The condition of the book (new, used)
        coverType:
          type: string
          description: The cover type of the book
        language:
          type: string
          description: The language of the book
        price:
          type: number
          description: The price of the book
        isAvailable:
          type: boolean
          description: Availability status of the book (in stock or sold)
        coverImageUrl:
          type: string
          description: URL of the book's cover image
          example: "https://example.com/cover.jpg"
      required:
        - title
        - author
        - publisher
        - publishedYear
        - pages
        - isbn13
        - description
        - price
        - genre
        - ageCategory
        - condition
        - coverType
      example:
        title: "The Golden Compass"
        author: "Philip Pullman"
        publisher: "Scholastic"
        publishedYear: 1995
        pages: 399
        isbn10: "0590616769"
        isbn13: "978-0590616769"
        description: "The first book in Philip Pullmanâ€™s award-winning trilogy, His Dark Materials."
        genre: "Fantasy"
        ageCategory: "Teens & Young Adult"
        condition: "New"
        coverType: "Hardcover"
        language: "English"
        price: 9.99
        isAvailable: true
        coverImageUrl: "https://example.com/cover.jpg"
  examples:
    CurrentYear:
      value: 2024
  
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []

tags:
  - name: Authentication
    description: Endpoints related to user authentication
  - name: Password Recovery
    description: Endpoints related to password recovery
  - name: Books
    description: Endpoints related to managing books
