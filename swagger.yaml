openapi: 3.0.0
info:
  title: Re:Books API
  description: API for managing selling books from user's personal libraries.
  version: 1.0.0
servers:
  - url: 'http://localhost:8000/api/v1'
    description: Development server

paths:
  /register:
    post:
      tags:
        - Authentication
      summary: Register User
      operationId: RegisterUser
      requestBody:
        description: User registration data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: bob
                  description: User's first name
                lastName:
                  type: string
                  example: white
                  description: User's last name
                email:
                  type: string
                  format: email
                  example: bob@gmail.com
                  description: User's email address
                password:
                  type: string
                  format: password
                  example: secret
                  description: User's password
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Bad request
      security: []
  /login:
    post:
      tags:
        - Authentication
      summary: User Login
      operationId: LoginUser
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                  description: User's email address
                password:
                  type: string
                  format: password
                  example: secretpassword
                  description: User's password
      responses:
        '200':
          description: User logged in successfully
        '400':
          description: Bad Request - Missing email or password
        '401':
          description: Unauthorized - Invalid credentials
        '500':
          description: Internal Server Error
      security: []
  /logout:
    post:
      tags:
        - Authentication
      summary: Logout User
      operationId: LogoutUser
      responses:
        '200':
          description: User logged out successfully
        '500':
          description: Internal Server Error
      security: []
  /update:
    patch:
      tags:
        - Authentication
      summary: Update User Information
      operationId: UpdateUser
      requestBody:
        required: true
        description: A JSON object specifying the user fields to update
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: John
                  description: User's first name
                lastName:
                  type: string
                  example: Doe
                  description: User's last name
                location:
                  type: string
                  example: New York
                  description: User's location
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Bad request (e.g., no valid fields to update or empty location)
        '401':
          description: Unauthorized (e.g., missing or invalid token)
        '500':
          description: Internal Server Error
      security:
        - BearerAuth: []
  /forgot-password:
    post:
      tags:
        - Password Recovery
      summary: Request a password reset link
      operationId: RequestPasswordReset
      description: |
        Initiates the process of resetting the user's password by sending a password reset link to the provided email. The link will contain a JWT token which is valid for 1 hour.
        The token is used to verify the userâ€™s identity and allows the user to securely reset their password.
      requestBody:
        description: Email address to request password reset
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: The email address of the user who wants to reset their password.
              required:
                - email
      responses:
        '200':
          description: Password reset link sent successfully
        '400':
          description: Bad request due to missing or invalid email
        '404':
          description: Email not found in the system
      security: []
  /password-reset:
    post:
      tags:
        - Password Recovery
      summary: Reset the password using a reset token
      operationId: ResetPassword
      description: |
        This endpoint allows a user to reset their password using a valid JWT reset token received via email. The token verifies the user's identity and ensures that the reset process is secure.
        If the token is expired or invalid, the request will be rejected.
      requestBody:
        description: Token and new password to reset the user's password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The token received in the password reset email.
                newPassword:
                  type: string
                  description: The new password the user wants to set.
              required:
                - token
                - newPassword
      responses:
        '200':
          description: Password successfully reset
        '400':
          description: Bad request due to missing or invalid parameters
        '401':
          description: Unauthorized due to invalid or expired token
      security: []
  /books:
    get:
      summary: Get all books
      description: Fetches a list of books with optional filters.
      tags:
        - Books
      parameters:
        - name: query
          in: query
          description: General search query
          required: false
          schema:
            type: string
        - name: title
          in: query
          description: Filter by book title
          required: false
          schema:
            type: string
        - name: author
          in: query
          description: Filter by author
          required: false
          schema:
            type: string
        - name: isbn
          in: query
          description: Filter by ISBN
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Limit the number of books returned
          required: false
          schema:
            type: integer
            default: 12
        - name: skip
          in: query
          description: Skip the first N books (pagination)
          required: false
          schema:
            type: integer
            default: 0
        - name: ageCategory
          in: query
          description: Filter by age category
          required: false
          schema:
            type: string
        - name: condition
          in: query
          description: Filter by condition
          required: false
          schema:
            type: string
        - name: genre
          in: query
          description: Filter by genre
          required: false
          schema:
            type: string
        - name: coverType
          in: query
          description: Filter by cover type
          required: false
          schema:
            type: string
        - name: sort
          in: query
          description: Sorting parameter
          required: false
          schema:
            type: string
            default: '-createdAt'
        - name: userId
          in: query
          description: Filter by user ID (owner of the books)
          required: false
          schema:
            type: string
        - name: isAvailable
          in: query
          description: Filter by availability (true/false)
          required: false
          schema:
            type: string
            enum:
              - 'true'
              - 'false'
      responses:
        '200':
          description: Successfully retrieved books
          content:
            application/json:
              schema:
                type: object
                properties:
                  books:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
                  count:
                    type: integer
                    example: 12
        '400':
          description: Invalid query parameters
        '500':
          description: Internal server error
      security: []
  /books/{id}:
    get:
      summary: Get a single book
      description: Fetches a book by its ID.
      tags:
        - Books
      parameters:
        - name: id
          in: path
          description: The ID of the book
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
        '500':
          description: Internal server error
      security: []
    patch:
      summary: Update a book
      description: Updates the details of an existing book.
      tags:
        - Books
      parameters:
        - name: id
          in: path
          description: The ID of the book to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Book data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Successfully updated the book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid data provided
        '404':
          description: Book not found
        '500':
          description: Internal server error

    delete:
      summary: Delete a book
      description: Deletes a book by its ID.
      tags:
        - Books
      parameters:
        - name: id
          in: path
          description: The ID of the book to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted the book
        '404':
          description: Book not found
        '500':
          description: Internal server error

  /books/:
    post:
      summary: Create a new book
      description: Adds a new book to the collection.
      tags:
        - Books
      requestBody:
        description: Book data to create a new book
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid data provided
        '500':
          description: Internal Server Error
  /saved-books:
    get:
      summary: Get the list of user's saved books
      tags: 
        - Saved Books
      parameters:
      - in: query
        name: sort
        schema:
          type: string
          example: '-addedAt'
          description: Sort order for the saved books. Use `-` prefix for descending order (e.g., `-addedAt`).
      responses:
          '200':
            description: Book removed from saved list successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    msg:
                      type: string
                      example: Book removed from saved list successfully.
                    savedBooks:
                      type: object
                      description: Updated saved books list
          '400':
            description: Book ID is required to remove a book
          '404':
            description: No saved books found for this user or book not found in saved list
          '500':
            description: Internal server error
    post:
      summary: Add a book to Saved books
      tags: 
        - Saved Books
      requestBody:
        description: ISBN data to add to SavedBooks
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isbn10:
                  type: string
                  example: 014032609X
                  description: ISBN-10 of the book
                isbn13:
                  type: string
                  example: 9780140326093
                  description: ISBN-13 of the book
      responses:
        '201':
          description: Book added successfully
        '400':
          description: At least one ISBN (ISBN-10 or ISBN-13) must be provided
        '500':
          description: Internal server error
    delete:
      summary: Delete a book from Saved books
      tags: 
        - Saved Books
      requestBody:
        description: Book Id that it has in Saved books
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                savedBookId:
                  type: string
                  example: 676c9cb5cfa4ca1f72049912
                  description: Id of the book in Saved books
      responses:
          '200':
            description: Book removed from saved list successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    msg:
                      type: string
                      example: Book removed from saved list successfully.
                    savedBooks:
                      type: object
                      description: Updated saved books list
          '400':
            description: Book ID is required to remove a book
          '404':
            description: No saved books found for this user or book not found in saved list
          '500':
            description: Internal server error
  /cart:
    get:
      summary: Get the user's cart
      tags: 
        - Cart
      responses:
        '200':
          description: User's cart retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  cart:
                    type: object
                    description: The user's cart details
        '404':
          description: Cart not found
        '500':
          description: Internal server error
    
    post:
      summary: Add a book to the cart
      tags:
        - Cart
      requestBody:
        description: Book ID to add to the cart
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookId:
                  type: string
                  example: 675509a34ca84e55832c2555
                  description: ID of the book to be added
      responses:
        '201':
          description: Book added to the cart successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Book added to cart
                  cart:
                    type: object
                    description: Updated cart details
        '400':
          description: Book is unavailable, does not exist, or already in the cart
        '500':
          description: Internal server error
    
  /cart/{id}:
    delete:
      summary: Remove an item from the cart
      tags: 
        - Cart
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: 63f0b5c9f6d4a35e8f6d4c34
          description: ID of the item (book) to be removed
      responses:
        '200':
          description: Item removed successfully
          content: 
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Item removed successfully
                  cart:
                    type: object
                    description: Updated cart details
        '400':
          description: Cart not found
        '500':
          description: Internal server error
  
  /cart/create-payment-intent:
    post:
      summary: Create a payment intent for the cart
      tags: 
        - Cart
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  clientSecret:
                    type: string
                    description: Stripe client secret for the payment intent
        '400':
          description: Cart is empty or payment already processed
        '500':
          description: Internal server error
  /cart/confirm-payment:
    post:
      summary: Confirm the payment for the cart
      tags: 
        - Cart
      requestBody:
        description: Payment intent ID to confirm
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentIntentId:
                  type: string
                  example: pi_1HtZ7xLdXXE2cM5p1tGc3dhG
                  description: Stripe payment intent ID
      responses:
        '200':
          description: Payment confirmed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Payment successful
                  cart:
                    type: object
                    description: Updated cart details
        '400':
          description: Payment was not successful
        '404':
          description: Cart not found
        '500':
          description: Internal server error
  
  /chats:
    post:
      summary: Create or retrieve a chat between two users
      tags:
        - Chats
      requestBody:
        description: User ids of the chat participants
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: 64a6b2c5e16e5c0b9cd02abc
                  description: The user id of the other participant
      responses:
        '200':
          description: Chat retrieved or created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Chat created successfully
                  chat:
                    type: object
                    description: Details of the chat
        '400':
          description: User id of the other participant must be provided
        '500':
          description: Internal server error
    get:
      summary: Get all chats for the authenticated user
      tags:
        - Chats
      responses:
        '200':
          description: List of chats retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: 64a6b2c5e16e5c0b9cd02abc
                      description: Chat Id
                    peerId:
                      type: string
                      example: 64a6b2c5e16e5c0b9cd02abd
                      description: Id of the other participant
                    peerName:
                      type: string
                      example: John Doe
                      description: Name of the other participant
        '400':
          description: User ID is required
        '404':
          description: No chats found
        '500':
          description: Internal server error
  /chats/{chatId}/messages:
    post:
      summary: Send a message in a chat
      tags:
        - Chats
      parameters:
        - in: path
          name: chatId
          required: true
          schema:
            type: string
            example: 64a6b2c5e16e5c0b9cd02abc
            description: ID of the chat
      requestBody:
        description: Message content to send
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Hello, how are you?"
                  description: Message text to send
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: 64a6b2c5e16e5c0b9cd02abd
                    description: Message ID
                  senderId:
                    type: string
                    example: 64a6b2c5e16e5c0b9cd02abc
                    description: ID of the sender
                  text:
                    type: string
                    example: "Hello, how are you?"
                    description: The message text
                  timestamp:
                    type: string
                    example: "2023-07-20T15:45:00Z"
                    description: Timestamp of the message
        '400':
          description: Chat ID and message are required
        '500':
          description: Internal server error
    get:
      summary: Get details of a chat and its messages
      tags:
        - Chats
      parameters:
        - in: path
          name: chatId
          required: true
          schema:
            type: string
            example: 64a6b2c5e16e5c0b9cd02abc
            description: ID of the chat
      responses:
        '200':
          description: Chat details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  chat:
                    type: object
                    description: Chat details
                  messages:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: 64a6b2c5e16e5c0b9cd02abd
                          description: Message ID
                        senderId:
                          type: string
                          example: 64a6b2c5e16e5c0b9cd02abc
                          description: ID of the sender
                        text:
                          type: string
                          example: "Hello, how are you?"
                          description: The message text
                        timestamp:
                          type: string
                          example: "2023-07-20T15:45:00Z"
                          description: Timestamp of the message
        '400':
          description: Chat ID is required
        '404':
          description: Chat not found or user is not a participant
        '500':
          description: Internal server error
  
  /orders:
    get:
      summary: Get a list of orders
      tags:
        - Orders
      responses:
        '200':
          description: Successfully retrieved orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  buyOrders:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: 64a6b2c5e16e5c0b9cd02abc
                        orderNumber:
                          type: string
                          example: c8d7a110-b7d5-4b9e-93e2-d1472af74c3f
                        buyer:
                          type: object
                          properties:
                            firstName:
                              type: string
                              example: John
                            lastName:
                              type: string
                              example: Doe
                            email:
                              type: string
                              example: john.doe@example.com
                        items:
                          type: array
                          items:
                            type: object
                            properties:
                              book:
                                type: object
                                properties:
                                  title:
                                    type: string
                                    example: "Some Book Title"
                                  author:
                                    type: string
                                    example: "Author Name"
                              price:
                                type: number
                                example: 19.99
                        total:
                          type: number
                          example: 50.99
                  sellOrders:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: 64a6b2c5e16e5c0b9cd02abc
                        orderNumber:
                          type: string
                          example: c8d7a110-b7d5-4b9e-93e2-d1472af74c3f
                        seller:
                          type: object
                          properties:
                            firstName:
                              type: string
                              example: Alice
                            lastName:
                              type: string
                              example: Smith
                            email:
                              type: string
                              example: alice.smith@example.com
                        items:
                          type: array
                          items:
                            type: object
                            properties:
                              book:
                                type: object
                                properties:
                                  title:
                                    type: string
                                    example: "Another Book Title"
                                  author:
                                    type: string
                                    example: "Another Author"
                              price:
                                type: number
                                example: 25.99
                        total:
                          type: number
                          example: 75.99
        '500':
          description: Internal server error
    post:
      summary: Create orders from cart
      tags:
        - Orders
      responses:
        '201':
          description: Orders created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Orders created successfully
                  orders:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: 64a6b2c5e16e5c0b9cd02abc
                        orderNumber:
                          type: string
                          example: c8d7a110-b7d5-4b9e-93e2-d1472af74c3f
                        status:
                          type: string
                          enum: [Pending, Confirmed, Shipped, Delivered, Cancelled]
                          example: Confirmed
        '400':
          description: Bad Request - Cart is empty
        '500':
          description: Internal server error
  /orders/{id}:
    get:
      summary: Get order details
      tags:
        - Orders
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Order ID
      responses:
        '200':
          description: Successfully retrieved order
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: 64a6b2c5e16e5c0b9cd02abc
                  orderNumber:
                    type: string
                    example: c8d7a110-b7d5-4b9e-93e2-d1472af74c3f
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        book:
                          type: object
                          properties:
                            title:
                              type: string
                              example: "Some Book Title"
                            author:
                              type: string
                              example: "Author Name"
        '404':
          description: Order not found
        '500':
          description: Internal server error
    patch:
      summary: Update order status
      description: |
        Updates the status of an order based on the user's role (buyer or seller).
        - **Buyers** can:
          - Cancel orders in "Pending" status.
          - Mark orders as "Delivered" if they are in "Shipped" status.
        - **Sellers** can:
          - Confirm or cancel orders in "Pending" status.
          - Ship or cancel orders in "Confirmed" status.
      tags:
        - Orders
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the order to update.
          schema:
            type: string
            example: "64c9e7f2b6d3f92a1e4f0b23"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - Pending
                    - Confirmed
                    - Shipped
                    - Delivered
                    - Cancelled
                  description: The new status for the order.
                  example: Confirmed
      responses:
        '200':
          description: Order status updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order status updated to 'Confirmed' successfully"
                  order:
                    type: object
                    description: The updated order details.
        '400':
          description: Invalid input or unauthorized operation
        '404':
          description: Order not found
        '500':
          description: Internal server error

components:
  schemas:
    Book:
      type: object
      properties:
        title:
          type: string
          description: The title of the book
          minLength: 2
          maxLength: 100
        author:
          type: string
          description: The author of the book
          minLength: 2
          maxLength: 100
        publisher:
          type: string
          description: The publisher of the book
          minLength: 2
          maxLength: 100
        publishedYear:
          type: integer
          description: The year the book was published
          minimum: 1440
          maximum: { "$ref": "#/components/examples/CurrentYear" }
        pages:
          type: integer
          description: The number of pages in the book
          minimum: 2
        isbn10:
          type: string
          description: ISBN-10 identifier
        isbn13:
          type: string
          description: ISBN-13 identifier
        description:
          type: string
          description: A brief description of the book
        genre:
          type: string
          description: The genre of the book
        ageCategory:
          type: string
          description: The age category for the book
        condition:
          type: string
          description: The condition of the book (new, used)
        coverType:
          type: string
          description: The cover type of the book
        language:
          type: string
          description: The language of the book
        price:
          type: number
          description: The price of the book
        isAvailable:
          type: boolean
          description: Availability status of the book (in stock or sold)
        coverImageUrl:
          type: string
          description: URL of the book's cover image
          example: "https://example.com/cover.jpg"
      required:
        - title
        - author
        - publisher
        - publishedYear
        - pages
        - isbn13
        - description
        - price
        - genre
        - ageCategory
        - condition
        - coverType
      example:
        title: "The Golden Compass"
        author: "Philip Pullman"
        publisher: "Scholastic"
        publishedYear: 1995
        pages: 399
        isbn10: "0590616769"
        isbn13: "978-0590616769"
        description: "The first book in Philip Pullmanâ€™s award-winning trilogy, His Dark Materials."
        genre: "Fantasy"
        ageCategory: "Teens & Young Adult"
        condition: "New"
        coverType: "Hardcover"
        language: "English"
        price: 9.99
        isAvailable: true
        coverImageUrl: "https://example.com/cover.jpg"
  examples:
    CurrentYear:
      value: 2024
  
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []

tags:
  - name: Authentication
    description: Endpoints related to user authentication
  - name: Password Recovery
    description: Endpoints related to password recovery
  - name: Books
    description: Endpoints related to managing books
  - name: Saved Books
    description: Endpoints related to managing saved books
  - name: Cart
    description: Endpoints related to managing user's cart
  - name: Chats
    description: Endpoints related to managing messages between users
  - name: Orders
    description: Endpoints related to managing user's orders
